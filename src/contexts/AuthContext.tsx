import React, { createContext, useContext, useState, useEffect } from 'react';
import { supabase } from '../supabaseClient';
import type { Session, User } from '@supabase/supabase-js';

// "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß" ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á profiles ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á!)
export interface Profile {
  id: string; // uuid
  username: string;
  avatar_url: string | null;
}

// "‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß" ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Context ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡πÜ
interface AuthContextType {
  session: Session | null;
  user: User | null;
  profile: Profile | null;
  loading: boolean;
  logout: () => Promise<void>;
  refetchProfile: () => Promise<void>;
  refreshSession: () => Promise<void>; // üëà NEW
}

// 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Context (‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÜ)
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£" (Provider) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏∏‡πâ‡∏°‡πÅ‡∏≠‡∏õ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [loading, setLoading] = useState(true);
  const [session, setSession] = useState<Session | null>(null);
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  const getProfile = async () => {
    if (!user) {
      setProfile(null);
      return;
    }
    const { data, error, status } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single();

    if (error && status !== 406) {
      // 406 (Not Found) ‡∏Ñ‡∏∑‡∏≠ Profile ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà Error ‡πÅ‡∏•‡∏∞ Profile ‡πÄ‡∏õ‡πá‡∏ô null
      setProfile(null);
    } else if (status === 406) {
      setProfile(null); // ‡πÑ‡∏°‡πà‡∏û‡∏ö Row -> Profile ‡πÄ‡∏õ‡πá‡∏ô null
    } else if (data) {
      setProfile(data as Profile); // ‡∏û‡∏ö Row -> Profile ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    }
  };

  // üí° [NEW] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Session ‡πÅ‡∏•‡∏∞ User ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const refreshSession = async () => {
    const { data: { session: supaSession } } = await supabase.auth.getSession();
    setSession(supaSession);
    setUser(supaSession?.user ?? null);
  };

  // üí° [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] useEffect ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà 1: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Listener
  useEffect(() => {
    const { data: listener } = supabase.auth.onAuthStateChange(
      (_event, supaSession) => {
        setSession(supaSession);
        setUser(supaSession?.user ?? null);
        // ‚ùå setLoading(false); ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å!
      }
    );

    // ‡∏î‡∏∂‡∏á Session ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    const fetchSession = async () => {
      const { data: { session: supaSession } } = await supabase.auth.getSession();
      setSession(supaSession);
      setUser(supaSession?.user ?? null);
    };
    fetchSession();

    return () => {
      listener.subscription.unsubscribe();
    };
  }, []); // ‡∏£‡∏±‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

  // ‡∏î‡∏∂‡∏á profile ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà user ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    if (user === undefined) { 
        return; 
    }
    setLoading(true);
    getProfile().finally(() => {
        setLoading(false);
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user]); // üëà ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà [user] ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Logout
  const logout = async () => {
    await supabase.auth.signOut();
    setSession(null);
    setUser(null);
    setProfile(null);
  };

  const value = {
    session,
    user,
    profile,
    loading,
    logout,
    refetchProfile: getProfile,
    refreshSession: refreshSession, // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Context Value
  };

  if (loading) {
    return (
      <div className="h-screen w-full flex items-center justify-center">Loading from AuthContext...</div>
    );
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á "Hook" (‡∏ó‡∏≤‡∏á‡∏•‡∏±‡∏î) ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡πÜ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};